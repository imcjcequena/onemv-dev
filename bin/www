#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var Mongoose = require('mongoose');
var util = require('../util');
const queryString = require('querystring');
require('dotenv').config();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

/**
 * Event listener for HTTP server "listening" event.
 */


function DBInit() {
  const username = queryString.escape(process.env.MONGODB_USERNAME);
  const password = queryString.escape(process.env.MONGODB_PASSWORD);
  const host = queryString.escape(process.env.MONGODB_URL);
  const dbport = queryString.escape(process.env.MONGODB_PORT);
  const dbname = queryString.escape(process.env.MONGODB_NAME);

  Mongoose.connect(`mongodb://${username}:${password}@${host}:${dbport}/${dbname}`, { useNewUrlParser: true, useFindAndModify: true },  function (err, client) {
    console.log('DB Connection', `mongodb://${username}:${password}@${host}:${dbport}/${dbname}`)
    if (err) throw err
    console.log('MongoDB Connected')
  })
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  DBInit();
  console.info('##########################################################');
  console.info('#####               STARTING SERVER                  #####');
  console.info('##########################################################\n');
  console.info(`App listening on port ${port} ...`);
}

